				;file E:\Doing\0 音頻口通信\ASSP MCU\hijiack\source code\main.asm
				;1	;___________________________________________________________________
				;2	;___________________________________________________________________
				;3	;Copyright :    2015 by HOLTEK SEMICONDUCTOR INC
				;4	;File Name :    main.asm
				;5	;Targer :       hijack Board
				;6	;MCU :          HT68F002
				;7	;Version :      V00
				;8	;Author :       ChenTing
				;9	;Date :         2015/04/10
				;10	;Description :  hijack 音頻通信測試
				;11	;History : 
				;12	;___________________________________________________________________
				;13	;___________________________________________________________________
				;14	
				;15	include config.inc
				;16	include target.inc
				;17	include hijack.inc
				;18	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;19	;@------------------------Library API------------------------------@
				;20	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;21	EXTERN  _CLEAR_RAM				:NEAR
				;22	EXTERN  _INIT_PORT				:NEAR 
				;23	EXTERN  _INIT_WDT				:NEAR
				;24	EXTERN  _INIT_SysFrequency		:NEAR
				;25	EXTERN  _INIT_LVD				:NEAR
				;26	EXTERN  _IIC_INT_ISR			:NEAR
				;27	EXTERN  _IIC_init				:NEAR
				;28	
				;29	EXTERN  _hijack_Receive			:NEAR
				;30	EXTERN  _hijack_Send			:NEAR
				;31	EXTERN  _hijack_init			:NEAR
				;32	
				;33	EXTERN	hijack_Receive_DataH	:BYTE
				;34	EXTERN	hijack_Receive_DataL	:BYTE
				;35	EXTERN	hijack_Send_Data_High	:BYTE
				;36	EXTERN	hijack_Send_Data_Low	:BYTE
				;37	EXTERN	IIC_Receive_Data_High	:BYTE
				;38	EXTERN	IIC_Receive_Data_Low	:BYTE
				;39	EXTERN	IIC_Send_Data_High 		:BYTE
				;40	EXTERN	IIC_Send_Data_Low 		:BYTE
				;41	EXTERN	IIC_RXok_Flag			:BIT
				;42	EXTERN	IIC_TXok_Flag			:BIT
				;43	EXTERN	Hijack_RxOk_Flag		:BIT
				;44	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;45	;@------------------------Library API------------------------------@
				;46	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;47	public	F_EMI
				;48	public	R_ATEMP
				;49	public  R_STATUS
				;50	public	Flag_SDA_Status
				;51	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;52	;@-----------------------------DATA--------------------------------@
				;53	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
				;54	ds	.section	'data'    
				;55	F_EMI					DBIT
				;56	Flag_SDA_Status			DBIT
				;57	R_ATEMP					DB	?
				;58	R_STATUS				DB	?
				;59	
				;60	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;61	;@-----------------------------CODE--------------------------------@
				;62	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;63	cs	.section	at  000h	'code'
				;64	        ORG     START_VECTOR
				;65	        SNZ     TO
				CS:
				include HT68F002.inc
0000	3A8A	snz     TO
				;66	        JMP     POWER_ON
0001	2819	jmp     POWER_ON
				;67	        JMP     MAIN
0002	2828	jmp     MAIN
0003	0000	nop
				;68	;ISR VECTOR Defination
				;69	        ORG     INT0_VECTOR
				;70	        JMP		_IIC_INT_ISR		;IIC從機子程序
0004	286A	jmp     _IIC_INT_ISR
				;71	        RETI
0005	0004	reti
0006	0000	nop
0007	0000	nop
				;72	;
				;73	        ORG		Timebase0_VECTOR 
				;74	        RETI
0008	0004	reti
0009	0000	nop
000A	0000	nop
000B	0000	nop
				;75	;
				;76			ORG		Timebase1_VECTOR
				;77			RETI
000C	0004	reti
000D	0000	nop
000E	0000	nop
000F	0000	nop
				;78	;
				;79			ORG		M_FUNCTION0_VECTOR
				;80			JMP		_hijack_Receive
0010	2914	jmp     _hijack_Receive
				;81			RETI
0011	0004	reti
0012	0000	nop
0013	0000	nop
				;82	;
				;83			ORG		EEPROM_VECTOR
				;84			RETI
0014	0004	reti
0015	0000	nop
0016	0000	nop
0017	0000	nop
				;85	;
				;86			ORG		ADC_VECTOR
				;87			RETI
0018	0004	reti
				;88	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;89						;---------Power ON-------------;
				;90	POWER_ON:
				;91			CALL	_CLEAR_RAM
				POWER_ON:
0019	204B	call    _CLEAR_RAM
				;92			CALL	_INIT_PORT
001A	2053	call    _INIT_PORT
				;93			CALL	_INIT_WDT
001B	2061	call    _INIT_WDT
				;94			CALL	_INIT_SysFrequency
001C	2064	call    _INIT_SysFrequency
				;95			CALL	_INIT_LVD
001D	2067	call    _INIT_LVD
				;96			CALL	_IIC_init
001E	20EB	call    _IIC_init
				;97			CALL	_hijack_init
001F	2225	call    _hijack_init
				;98			MOV		A,000H
0020	0F00	mov     a, 0H
				;99			MOV		IIC_Send_Data_High,A
0021	00C6	mov     IIC_SEND_DATA_HIGH, a
				;100			CLR		PAC3
0022	3595	clr     PAC3
				;101			SET		PA3
0023	3194	set     PA3
				;102			MOV		A,058H
0024	0F58	mov     a, 58H
				;103			MOV		hijack_Send_Data_High,A
0025	00CE	mov     HIJACK_SEND_DATA_HIGH, a
				;104			MOV		A,014H
0026	0F14	mov     a, 14H
				;105			MOV		hijack_Send_Data_Low,A
0027	00CF	mov     HIJACK_SEND_DATA_LOW, a
				;106			
				;107	MAIN:
				;108	;單純測試hijack發送到手機上
				;109			CLR		WDT
				MAIN:
0028	0001	clr     wdt
				;110			CLR		WDT1
0029	0001	clr     wdt
				;111			CLR		WDT2
002A	0005	clr     wdt2
				;112			CLR		EMI
002B	340E	clr     EMI
				;113			CALL	_hijack_Send
002C	20F5	call    _hijack_Send
				;114			INC		hijack_Send_Data_Low
002D	14CF	inc     HIJACK_SEND_DATA_LOW
				;115			JMP		Main
002E	2828	jmp     MAIN
				;116	
				;117	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;118	;判斷進入IIC中斷前SDA的狀態，用於判斷Start信號和stop信號		
				;119			SET		IIC_SDA_IO
002F	3295	set     PAC5
				;120			SNZ		IIC_SDA
0030	3A94	snz     PA5
				;121			JMP		SDA_LOW0
0031	2835	jmp     SDA_LOW0
				;122			JMP		SDA_High0
0032	2833	jmp     SDA_High0
				;123	SDA_High0:
				;124			SET		Flag_SDA_Status
				SDA_High0:
0033	30C0	set     [040H].1
				;125			JMP		Main_LOOP
0034	2836	jmp     Main_LOOP
				;126	SDA_LOW0:
				;127			CLR		Flag_SDA_Status
				SDA_LOW0:
0035	34C0	clr     [040H].1
				;128	Main_LOOP:		
				;129			CLR		WDT
				Main_LOOP:
0036	0001	clr     wdt
				;130			CLR		WDT1
0037	0001	clr     wdt
				;131			CLR		WDT2
0038	0005	clr     wdt2
				;132	;IIC接收成功，將數據用hijack發送出去			
				;133			SZ		IIC_RXok_Flag
0039	3C4B	sz      IIC_TEMP_BYTE[1].0
				;134			JMP		Movedata2Hijack	
003A	2844	jmp     Movedata2Hijack
				;135	;hijack接收成功，將數據發送IIC中，提供給主機讀取		
				;136			SZ		Hijack_RxOk_Flag
003B	3EE2	sz      HIJACK_RX_PARITY_COUNT[2].5
				;137			JMP		Movedata2IIC
003C	283E	jmp     Movedata2IIC
				;138			JMP		MAIN
003D	2828	jmp     MAIN
				;139			
				;140	Movedata2IIC:
				;141			CLR		Hijack_RxOk_Flag
				Movedata2IIC:
003E	36E2	clr     HIJACK_RX_PARITY_COUNT[2].5
				;142			MOV		A,hijack_Receive_DataH
003F	074C	mov     a, HIJACK_RECEIVE_DATAH
				;143			MOV		IIC_Send_Data_High,A
0040	00C6	mov     IIC_SEND_DATA_HIGH, a
				;144			MOV		A,hijack_Receive_DataL
0041	074D	mov     a, HIJACK_RECEIVE_DATAL
				;145			MOV		IIC_Send_Data_Low,A
0042	00C7	mov     IIC_SEND_DATA_LOW, a
				;146			JMP		MAIN
0043	2828	jmp     MAIN
				;147	Movedata2Hijack:
				;148			CLR		IIC_RXok_Flag
				Movedata2Hijack:
0044	344B	clr     IIC_TEMP_BYTE[1].0
				;149			MOV		A,IIC_Receive_Data_High
0045	0744	mov     a, IIC_RECEIVE_DATA_HIGH
				;150			MOV		hijack_Send_Data_High,A
0046	00CE	mov     HIJACK_SEND_DATA_HIGH, a
				;151			MOV		A,IIC_Receive_Data_Low
0047	0745	mov     a, IIC_RECEIVE_DATA_LOW
				;152			MOV		hijack_Send_Data_Low,A
0048	00CF	mov     HIJACK_SEND_DATA_LOW, a
				;153			CALL	_hijack_Send
0049	20F5	call    _hijack_Send
				;154			JMP		MAIN
004A	2828	jmp     MAIN
				;155			
				;156			
				;157	;Read_SDA_Status	PROC
				;158	;		SET		IIC_SDA_IO
				;159	;		SNZ		IIC_SDA
				;160	;		JMP		SDA_LOW
				;161	;		JMP		SDA_High
				;162	;SDA_High:
				;163	;		SET		Flag_SDA_Status
				;164	;		RET
				;165	;SDA_LOW:
				;166	;		CLR		Flag_SDA_Status
				;167	;		RET
				;168	;Read_SDA_Status	ENDP		
				;file E:\Doing\0 音頻口通信\ASSP MCU\hijiack\source code\sysyinit.asm
				;1	;___________________________________________________________________
				;2	;___________________________________________________________________
				;3	;Copyright :    2015 by HOLTEK SEMICONDUCTOR INC
				;4	;File Name :    sysinit.asm
				;5	;Targer :       hijack TEST Board
				;6	;MCU :          HT68F002
				;7	;Version :      V00
				;8	;Author :       ChenTing
				;9	;Date :         2015/04/10
				;10	;Description :  音頻通信程序測試
				;11	;				系統初始化程序
				;12	;History : 
				;13	;___________________________________________________________________
				;14	;___________________________________________________________________
				;15	include config.inc
				;16	include target.inc
				;17	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;18	;@---------------------Library API------------------------------@
				;19	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
				;20	Public 	_CLEAR_RAM
				;21	Public 	_INIT_PORT
				;22	Public	_INIT_WDT
				;23	public  _INIT_SysFrequency
				;24	public  _INIT_LVD
				;25	
				;26	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;27	
				;28							;-----------Clear RAM----------;
				;29	;@SUBROUTINE
				;30	;HT66F4540 , bank0:40h-FFh  )
				;31	_CLEAR_RAM PROC
				;32	        mov     A,040H          
				_CLEAR_RAM:
004B	0F40	mov     a, 40H
				;33	        mov     MP0,A           
004C	0081	mov     MP0, a
				;34	        mov     A,64d          
004D	0F40	mov     a, 40H
				;35	CLEAR_RAM_LOOP:                    
				;36	        clr     IAR0            
				CLEAR_RAM_LOOP:
004E	1F00	clr     [00H]
				;37	        inc     MP0             
004F	1481	inc     MP0
				;38	        SDZ     ACC             
0050	1785	sdz     ACC
				;39	        JMP     CLEAR_RAM_LOOP     
0051	284E	jmp     CLEAR_RAM_LOOP
				;40	        RET
0052	0003	ret
				;41	_CLEAR_RAM ENDP
				;42	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;43							;----------Initial Port----------;
				;44	;SUBROUTINE
				;45	_INIT_PORT PROC
				;46	        MOV     A,00H
				_INIT_PORT:
0053	0F00	mov     a, 0H
				;47	        MOV     PA,A        
0054	0094	mov     PA, a
				;48	        MOV     A,00H
0055	0F00	mov     a, 0H
				;49	        MOV     PAC,A      
0056	0095	mov     PAC, a
				;50	        MOV		A,00H
0057	0F00	mov     a, 0H
				;51	        MOV		PAPU,A       
0058	0096	mov     PAPU, a
				;52	        MOV		A,00H
0059	0F00	mov     a, 0H
				;53	        MOV		PAWU,A
005A	0097	mov     PAWU, a
				;54	
				;55			MOV		A,00H
005B	0F00	mov     a, 0H
				;56			MOV		PASR,A
005C	00A6	mov     PASR, a
				;57	
				;58			SET		PAC6		
005D	3315	set     PAC6
				;59			SET		PAC1
005E	3095	set     PAC1
				;60			SET		PAWU1	        	
005F	3097	set     PAWU1
				;61	        RET
0060	0003	ret
				;62	_INIT_PORT ENDP
				;63	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;64							;----------Initial WDTC----------;
				;65	;SUBROUTINE
				;66	_INIT_WDT PROC
				;67		    MOV		A,WDT_Function_Default
				_INIT_WDT:
0061	0F53	mov     a, 53H
				;68		    MOV		WDTC,A    	
0062	0099	mov     WDTC, a
				;69	        RET
0063	0003	ret
				;70	_INIT_WDT ENDP
				;71	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       
				;72							;----------Initial SysFrequency----------;
				;73	;SUBROUTINE
				;74	_INIT_SysFrequency PROC
				;75		    MOV		A,SYSFrequency_Default
				_INIT_SysFrequency:
0064	0FE0	mov     a, E0H
				;76		    MOV		SMOD,A    	
0065	008B	mov     SMOD, a
				;77	        RET
0066	0003	ret
				;78	_INIT_SysFrequency ENDP
				;79	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  
				;80							;----------Initial LVD----------;
				;81	;SUBROUTINE
				;82	_INIT_LVD PROC
				;83		    MOV		A,LVD_Voltage_Default
				_INIT_LVD:
0067	0F11	mov     a, 11H
				;84		    MOV		LVDC,A    	
0068	008C	mov     LVDC, a
				;85	        RET
0069	0003	ret
				;86	_INIT_LVD ENDP
				;87	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  
				;88							;----------Initial EMI----------;
				;89	;SUBROUTINE
				;90	;_INIT_LVD PROC
				;91	;	    MOV		A,LVD_Voltage_Default
				;92	;	    MOV		LVDC,A    	
				;93	;        RET
				;94	;_INIT_LVD ENDP
				;95	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
				;file E:\Doing\0 音頻口通信\ASSP MCU\hijiack\source code\IIC_Slave.asm
				;1	;___________________________________________________________________
				;2	;___________________________________________________________________
				;3	;Copyright :    2015 by HOLTEK SEMICONDUCTOR INC
				;4	;File Name :    sysinit.asm
				;5	;Targer :       hijack TEST Board
				;6	;MCU :          HT68F002
				;7	;Version :      V00
				;8	;Author :       ChenTing
				;9	;Date :         2015/04/10
				;10	;Description :  音頻通信程序測試
				;11	;				IIC_Slave程序
				;12	;History : 
				;13	;___________________________________________________________________
				;14	;___________________________________________________________________
				;15	include config.inc
				;16	include target.inc
				;17	;include IICSlave.inc
				;18	
				;19	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;20	;@---------------------Library API------------------------------@
				;21	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
				;22	EXTERN	R_STATUS 			:BYTE
				;23	EXTERN	R_ATEMP 			:BYTE
				;24	EXTERN	Flag_SDA_Status		:BIT
				;25	
				;26	Public 	_IIC_INT_ISR
				;27	public  IIC_Receive_Data_High
				;28	public	IIC_Receive_Data_Low
				;29	public	IIC_Send_Data_High
				;30	public	IIC_Send_Data_Low
				;31	public  _IIC_init
				;32	public	IIC_RXok_Flag		
				;33	public	IIC_TXok_Flag		
				;34	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;35	;@------------------------------DATA----------------------------@
				;36	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;37	rambank 0  IIC_Slave_datal
				;38	IIC_Slave_datal	.section	'data'   
				;39	
				;40	IIC_Device_Addr			DB	?
				;41	IIC_Receive_Data_High	DB	?
				;42	IIC_Receive_Data_Low	DB	?
				;43	IIC_Send_Data_High		DB	?
				;44	IIC_Send_Data_Low		DB	?
				;45	IIC_temp_conunt1		DB	?
				;46	IIC_temp_conunt2		DB	?
				;47	IIC_temp_BYTE			DB	?
				;48	IIC_RXok_Flag			DBIT
				;49	IIC_TXok_Flag			DBIT
				;50	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;51	;@-------------------------------CODE---------------------------@
				;52	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;53	IIC_Slave_code	.section	'code' 
				;54	
				;55	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;56	 _IIC_INT_ISR PROC
				;57	 		PUSH
				_IIC_INT_ISR:
				IIC_SLAVE_CODE:
006A	00C1	mov     R_ATEMP, a
006B	070A	mov     a, STATUS
006C	00C2	mov     R_STATUS, a
				;58	 		CLR		INTE 		
006D	348E	clr     INTE
				;59			SNZ		Flag_SDA_Status
006E	38C0	snz     [040H].1
				;60			JMP		_IIC_RET
006F	289B	jmp     _IIC_RET
				;61			CLR		Flag_SDA_Status
0070	34C0	clr     [040H].1
				;62	;判斷是否為有效start信號
				;63			SNZ		IIC_SCL		
0071	3A14	snz     PA4
				;64			JMP		_IIC_RET				;SDA下降沿的時候，SCL為low，不是IIC start信號
0072	289B	jmp     _IIC_RET
				;65			MOV		A,IIC_Time_Out_Count
0073	0FC8	mov     a, C8H
				;66			MOV		IIC_temp_conunt2,A
0074	00C9	mov     IIC_TEMP_CONUNT2, a
				;67	$1:					
				;68			SNZ		IIC_SCL				;SCL高電平就等待
				L0075:
0075	3A14	snz     PA4
				;69			JMP		$2
0076	2879	jmp     L0079
				;70			SDZ		IIC_temp_conunt2
0077	17C9	sdz     IIC_TEMP_CONUNT2
				;71			JMP		$1
0078	2875	jmp     L0075
				;72	$2:		
				;73	;讀取Device address
				;74			CALL	_IIC_Read_BYTEData		;讀取IIC 主機發送過來的設備地址
				L0079:
0079	20A1	call    _IIC_Read_BYTEData
				;75	Device_Addr_Judge:	;判斷地址是否匹配
				;76			MOV		A,IIC_temp_BYTE
				Device_Addr_Judge:
007A	074A	mov     a, IIC_TEMP_BYTE
				;77			MOV		IIC_Device_Addr,A
007B	00C3	mov     IIC_DEVICE_ADDR, a
				;78			MOV		A,0feH					;取出地址數據		
007C	0FFE	mov     a, FEH
				;79			AND		A,IIC_Device_Addr
007D	0643	and     a, IIC_DEVICE_ADDR
				;80			XOR		A,IIC_Device_Addr_Default
007E	0C28	xor     a, 28H
				;81			SNZ		Z
007F	390A	snz     Z
				;82			JMP		_IIC_RET				;地址不匹配，則退出
0080	289B	jmp     _IIC_RET
				;83	;地址匹配，發送ACK給主機
				;84			CALL	IIC_Ack					;收到設備地址，對設備地址ACK應答		
0081	20D9	call    IIC_Ack
				;85	;地址匹配，判斷主機需要讀取數據還是寫入數據
				;86			MOV		A,01H					;取出地址數據		
0082	0F01	mov     a, 1H
				;87			AND		A,IIC_Device_Addr
0083	0643	and     a, IIC_DEVICE_ADDR
				;88			SZ		ACC
0084	1085	sz      ACC
				;89			JMP		IIC_Master_Read			;主機需要讀取數據
0085	2887	jmp     IIC_Master_Read
				;90			JMP		IIC_Master_Write		;主機需要寫入數據
0086	288F	jmp     IIC_Master_Write
				;91	IIC_Master_Read:
				;92			MOV		A,IIC_Send_Data_High
				IIC_Master_Read:
0087	0746	mov     a, IIC_SEND_DATA_HIGH
				;93			MOV		IIC_temp_BYTE,A
0088	00CA	mov     IIC_TEMP_BYTE, a
				;94			CALL	_IIC_Write_BYTEData
0089	20BD	call    _IIC_Write_BYTEData
				;95			CALL	IIC_Ack					;收到1byte數據，ACK應答
008A	20D9	call    IIC_Ack
				;96			MOV		A,IIC_Send_Data_High
008B	0746	mov     a, IIC_SEND_DATA_HIGH
				;97			MOV		IIC_temp_BYTE,A
008C	00CA	mov     IIC_TEMP_BYTE, a
				;98			CALL	_IIC_Write_BYTEData		
008D	20BD	call    _IIC_Write_BYTEData
				;99			JMP		_IIC_Tx_OK_RET
008E	2897	jmp     _IIC_Tx_OK_RET
				;100		
				;101	IIC_Master_Write:		
				;102			CALL	_IIC_Read_BYTEData
				IIC_Master_Write:
008F	20A1	call    _IIC_Read_BYTEData
				;103			MOV		A,IIC_temp_BYTE
0090	074A	mov     a, IIC_TEMP_BYTE
				;104			MOV		IIC_Receive_Data_High,A
0091	00C4	mov     IIC_RECEIVE_DATA_HIGH, a
				;105	;修改為雙字節
				;106			CALL	IIC_Ack					;收到1byte數據，ACK應答		
0092	20D9	call    IIC_Ack
				;107			CALL	_IIC_Read_BYTEData
0093	20A1	call    _IIC_Read_BYTEData
				;108			MOV		A,IIC_temp_BYTE
0094	074A	mov     a, IIC_TEMP_BYTE
				;109			MOV		IIC_Receive_Data_Low,A
0095	00C5	mov     IIC_RECEIVE_DATA_LOW, a
				;110			JMP		_IIC_Rx_Ok_RET
0096	2899	jmp     _IIC_Rx_Ok_RET
				;111			
				;112	_IIC_Tx_OK_RET:
				;113			SET		IIC_TXok_Flag
				_IIC_Tx_OK_RET:
0097	30CB	set     IIC_TEMP_BYTE[1].1
				;114			JMP		_IIC_RET
0098	289B	jmp     _IIC_RET
				;115	_IIC_Rx_Ok_RET:
				;116			SET		IIC_RXok_Flag
				_IIC_Rx_Ok_RET:
0099	304B	set     IIC_TEMP_BYTE[1].0
				;117			JMP		_IIC_RET
009A	289B	jmp     _IIC_RET
				;118	_IIC_RET:
				;119			SET		INTE
				_IIC_RET:
009B	308E	set     INTE
				;120			CLR		INTF
009C	360E	clr     INTF
				;121			POP
009D	0742	mov     a, R_STATUS
009E	008A	mov     STATUS, a
009F	0741	mov     a, R_ATEMP
				;122			RETI
00A0	0004	reti
				;123	_IIC_INT_ISR ENDP
				;124	
				;125	
				;126	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
				;127	_IIC_Read_BYTEData PROC
				;128			SET		IIC_SDA_IO
				_IIC_Read_BYTEData:
00A1	3295	set     PAC5
				;129			MOV 	A,9 				;SET 8 BIT COUNTER
00A2	0F09	mov     a, 9H
				;130			MOV 	IIC_temp_conunt1,A	
00A3	00C8	mov     IIC_TEMP_CONUNT1, a
				;131			CLR		IIC_temp_BYTE
00A4	1F4A	clr     IIC_TEMP_BYTE
				;132	IIC_Read_LOOP:	
				;133			SDZ 	IIC_temp_conunt1 	;8bit值是否已經讀取完成
				IIC_Read_LOOP:
00A5	17C8	sdz     IIC_TEMP_CONUNT1
				;134			JMP		IIC_Read_BYTEData_LOOP
00A6	28A8	jmp     IIC_Read_BYTEData_LOOP
				;135			RET
00A7	0003	ret
				;136	IIC_Read_BYTEData_LOOP:	
				;137			RL	 	IIC_temp_BYTE		;高位在前
				IIC_Read_BYTEData_LOOP:
00A8	18CA	rl      IIC_TEMP_BYTE
				;138			MOV		A,IIC_Time_Out_Count;config time out value
00A9	0FC8	mov     a, C8H
				;139			MOV		IIC_temp_conunt2,A		
00AA	00C9	mov     IIC_TEMP_CONUNT2, a
				;140	$1:						
				;141			SZ		IIC_SCL				;SCL低電平狀態就等待
				L00AB:
00AB	3E14	sz      PA4
				;142			JMP		$2
00AC	28B0	jmp     L00B0
				;143			SDZ		IIC_temp_conunt2
00AD	17C9	sdz     IIC_TEMP_CONUNT2
				;144			JMP		$1
00AE	28AB	jmp     L00AB
				;145			RET
00AF	0003	ret
				;146	$2:					
				;147			SNZ		IIC_SDA				;讀取到來的data值
				L00B0:
00B0	3A94	snz     PA5
				;148			JMP		SDA_LOW0
00B1	28B5	jmp     SDA_LOW0
				;149			JMP		SDA_HIGH0
00B2	28B3	jmp     SDA_HIGH0
				;150	SDA_HIGH0:
				;151			SET		IIC_temp_BYTE.0
				SDA_HIGH0:
00B3	304A	set     IIC_TEMP_BYTE.0
				;152			JMP		IIC_Read_Next					
00B4	28B6	jmp     IIC_Read_Next
				;153	SDA_LOW0:
				;154			CLR		IIC_temp_BYTE.0
				SDA_LOW0:
00B5	344A	clr     IIC_TEMP_BYTE.0
				;155	IIC_Read_Next:		
				;156			MOV		A,IIC_Time_Out_Count
				IIC_Read_Next:
00B6	0FC8	mov     a, C8H
				;157			MOV		IIC_temp_conunt2,A
00B7	00C9	mov     IIC_TEMP_CONUNT2, a
				;158	$1:					
				;159			SNZ		IIC_SCL				;SCL高電平就等待
				L00B8:
00B8	3A14	snz     PA4
				;160			JMP		IIC_Read_LOOP
00B9	28A5	jmp     IIC_Read_LOOP
				;161			SDZ		IIC_temp_conunt2
00BA	17C9	sdz     IIC_TEMP_CONUNT2
				;162			JMP		$1		
00BB	28B8	jmp     L00B8
				;163			RET	
00BC	0003	ret
				;164	_IIC_Read_BYTEData ENDP
				;165	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;166	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
				;167	_IIC_Write_BYTEData PROC
				;168			CLR		IIC_SDA_IO
				_IIC_Write_BYTEData:
00BD	3695	clr     PAC5
				;169			MOV 	A,8 ;SET 8 BIT COUNTER
00BE	0F08	mov     a, 8H
				;170			MOV 	IIC_temp_conunt1,A
00BF	00C8	mov     IIC_TEMP_CONUNT1, a
				;171			MOV		A,IIC_Time_Out_Count
00C0	0FC8	mov     a, C8H
				;172			MOV		IIC_temp_conunt2,A						
00C1	00C9	mov     IIC_TEMP_CONUNT2, a
				;173	IIC_Write_BYTEData_LOOP:
				;174			SZ		IIC_SCL				;SCL低電平狀態就等待
				IIC_Write_BYTEData_LOOP:
00C2	3E14	sz      PA4
				;175			JMP		$2
00C3	28C7	jmp     L00C7
				;176			SDZ		IIC_temp_conunt2
00C4	17C9	sdz     IIC_TEMP_CONUNT2
				;177			JMP		IIC_Write_BYTEData_LOOP
00C5	28C2	jmp     IIC_Write_BYTEData_LOOP
				;178			RET
00C6	0003	ret
				;179	$2:			
				;180	;		MOV		A,80H				;取出地址數據		
				;181	;		AND		A,IIC_temp_BYTE
				;182	;		SZ		ACC
				;183			SZ		IIC_temp_BYTE.7
				L00C7:
00C7	3FCA	sz      IIC_TEMP_BYTE.7
				;184			JMP		SDA_HIGH1
00C8	28CA	jmp     SDA_HIGH1
				;185			JMP		SDA_LOW1
00C9	28CC	jmp     SDA_LOW1
				;186	SDA_HIGH1:
				;187			SET		IIC_SDA
				SDA_HIGH1:
00CA	3294	set     PA5
				;188			JMP		Write_Next_Bit
00CB	28CD	jmp     Write_Next_Bit
				;189	SDA_LOW1:
				;190			CLR		IIC_SDA
				SDA_LOW1:
00CC	3694	clr     PA5
				;191	Write_Next_Bit:
				;192			MOV		A,IIC_Time_Out_Count
				Write_Next_Bit:
00CD	0FC8	mov     a, C8H
				;193			MOV		IIC_temp_conunt2,A	
00CE	00C9	mov     IIC_TEMP_CONUNT2, a
				;194	$2:					
				;195			SNZ		IIC_SCL				;SCL高電平就等待
				L00CF:
00CF	3A14	snz     PA4
				;196			JMP		$1
00D0	28D4	jmp     L00D4
				;197			SDZ		IIC_temp_conunt2
00D1	17C9	sdz     IIC_TEMP_CONUNT2
				;198			JMP		$2
00D2	28CF	jmp     L00CF
				;199			RET		
00D3	0003	ret
				;200	$1:		
				;201	;		SET		IIC_SDA_IO				;讓出數據線
				;202			RL		IIC_temp_BYTE
				L00D4:
00D4	18CA	rl      IIC_TEMP_BYTE
				;203			SDZ 	IIC_temp_conunt1 	;8bit值是否已經讀取完成
00D5	17C8	sdz     IIC_TEMP_CONUNT1
				;204			JMP		IIC_Write_BYTEData_LOOP
00D6	28C2	jmp     IIC_Write_BYTEData_LOOP
				;205			SET		IIC_SDA_IO				;讓出數據線
00D7	3295	set     PAC5
				;206			RET	
00D8	0003	ret
				;207	_IIC_Write_BYTEData ENDP
				;208	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;209	IIC_Ack PROC
				;210	;應答信號，保證在兩個時鐘條邊沿SDA為低，則主機認為是從機應答
				;211			CLR		IIC_SDA_IO			;config SDA output
				IIC_Ack:
00D9	3695	clr     PAC5
				;212			MOV		A,IIC_Time_Out_Count
00DA	0FC8	mov     a, C8H
				;213			MOV		IIC_temp_conunt2,A
00DB	00C9	mov     IIC_TEMP_CONUNT2, a
				;214	$1:
				;215			SZ		IIC_SCL				;低電平就等待
				L00DC:
00DC	3E14	sz      PA4
				;216			JMP		$2
00DD	28E1	jmp     L00E1
				;217			SDZ		IIC_temp_conunt2
00DE	17C9	sdz     IIC_TEMP_CONUNT2
				;218			JMP		$1
00DF	28DC	jmp     L00DC
				;219			RET
00E0	0003	ret
				;220	$2:			
				;221			CLR		IIC_SDA		;第9個CLK變高的情況下，SDA輸出0
				L00E1:
00E1	3694	clr     PA5
				;222			MOV		A,IIC_Time_Out_Count
00E2	0FC8	mov     a, C8H
				;223			MOV		IIC_temp_conunt2,A
00E3	00C9	mov     IIC_TEMP_CONUNT2, a
				;224	$3:				
				;225			SNZ		IIC_SCL
				L00E4:
00E4	3A14	snz     PA4
				;226			JMP		$4
00E5	28E9	jmp     L00E9
				;227			SDZ		IIC_temp_conunt2
00E6	17C9	sdz     IIC_TEMP_CONUNT2
				;228			JMP		$3
00E7	28E4	jmp     L00E4
				;229			RET
00E8	0003	ret
				;230	$4:				
				;231			SET		IIC_SDA_IO		;第9個CLK變低的情況下，釋放總線
				L00E9:
00E9	3295	set     PAC5
				;232			RET
00EA	0003	ret
				;233	IIC_Ack ENDP
				;234	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;235	_IIC_init PROC
				;236			CLR		IIC_SDA
				_IIC_init:
00EB	3694	clr     PA5
				;237			SET		IIC_SDA_IO		;輸出話IO口設定
00EC	3295	set     PAC5
				;238			SET		IIC_SCL_IO	
00ED	3215	set     PAC4
				;239			CLR		IIC_SCL
00EE	3614	clr     PA4
				;240			
				;241	
				;242			MOV		A,INT0_Default	;config INT觸發中斷
00EF	0F03	mov     a, 3H
				;243			MOV		INTEG,A
00F0	008D	mov     INTEG, a
				;244			CLR		INTF
00F1	360E	clr     INTF
				;245			SET		INTE
00F2	308E	set     INTE
				;246			SET		EMI				;使能INT
00F3	300E	set     EMI
				;247					
				;248			RET
00F4	0003	ret
				;249	_IIC_init ENDP
				;250	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;251	
				;file E:\Doing\0 音頻口通信\ASSP MCU\hijiack\source code\hijack.asm
				;1	;___________________________________________________________________
				;2	;___________________________________________________________________
				;3	;Copyright :    2015 by HOLTEK SEMICONDUCTOR INC
				;4	;File Name :    hijack.asm
				;5	;Targer :       hijack TEST Board
				;6	;MCU :          HT68F002
				;7	;Version :      V00
				;8	;Author :       ChenTing
				;9	;Date :         2015/04/10
				;10	;Description :  音頻通信程序測試
				;11	;				音頻通信主要程序
				;12	;History : 
				;13	;___________________________________________________________________
				;14	;___________________________________________________________________
				;15	include config.inc
				;16	include target.inc
				;17	include hijack.inc
				;18	
				;19	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;20	;@---------------------Library API------------------------------@
				;21	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;22	EXTERN	F_EMI 				:BIT
				;23	EXTERN	R_STATUS 			:BYTE
				;24	EXTERN	R_ATEMP 			:BYTE
				;25	EXTERN	IIC_RXok_Flag		:BIT
				;26	
				;27	public  _hijack_init
				;28	Public 	_hijack_Receive
				;29	public  _hijack_Send
				;30	
				;31	public	Hijack_RxOk_Flag
				;32	public	hijack_Send_Data_High
				;33	public	hijack_Send_Data_Low
				;34	public	hijack_Receive_DataH
				;35	public	hijack_Receive_DataL
				;36	
				;37	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;38	;@------------------------------DATA----------------------------@
				;39	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;40	rambank 0  hijack_datal
				;41	hijack_datal	.section	'data'   
				;42	
				;43	hijack_Receive_DataH		DB	?
				;44	hijack_Receive_DataL		DB	?
				;45	hijack_Send_Data_High		DB	?
				;46	hijack_Send_Data_Low		DB	?
				;47	hijack_temp_Byte			DB	?
				;48	hijack_temp_count1			DB	?
				;49	hijack_temp_count2			DB	?
				;50	hijack_CCRP_count			DB	?
				;51	hijack_Rx_step				DB	?
				;52	high_CCRA1_H				DB	?
				;53	high_CCRA1_L				DB	?
				;54	high_CCRA2_H				DB	?
				;55	high_CCRA2_L				DB	?
				;56	hijack_Period_H				DB	?
				;57	hijack_Period_L				DB	?
				;58	TEST_COUNT					DB	?
				;59	TEST_COUNT2					DB	?
				;60	TEST_COUNT3					DB	?
				;61	hijack_Idle_Count			DB	?
				;62	hijack_Rx_Count				DB	?
				;63	hijack_Rx_Parity_Count		DB	?
				;64	
				;65	F_First_CCRA				DBIT
				;66	F_hijack_Rx_Error			DBIT
				;67	F_hijack_Rx_Start			DBIT
				;68	F_CompleteRx1Bit			DBIT
				;69	F_0or1Bit					DBIT
				;70	F_PrepareMode				DBIT
				;71	F_IdleMode					DBIT
				;72	F_ByteMode					DBIT
				;73	F_hijackstartOk				DBIT
				;74	F_Parity_StopMode			DBIT
				;75	F_Parity_Ok					DBIT
				;76	F_Stop_idleMode				DBIT
				;77	F_First_Parity_StopMode		DBIT
				;78	
				;79	Hijack_RxOk_Flag			DBIT
				;80	
				;81	
				;82	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;83	;@-------------------------------CODE---------------------------@
				;84	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;85	hijack_code	.section	'code' 
				;86	
				;87	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;88	_hijack_Send PROC
				;89			CLR		IIC_RXok_Flag
				_hijack_Send:
				HIJACK_CODE:
00F5	344B	clr     IIC_TEMP_BYTE[1].0
				;90			CLR		IIC_SCL_IO;
00F6	3615	clr     PAC4
				;91			CLR		IIC_SCL		;hijack發送數據的時候拉低SCL，不接收IICdata
00F7	3614	clr     PA4
				;92			SNZ		EMI
00F8	380E	snz     EMI
				;93			JMP		$1
00F9	28FC	jmp     L00FC
				;94			SET		F_EMI
00FA	3040	set     [040H].0
				;95			JMP		$2			
00FB	28FE	jmp     L00FE
				;96	$1:		
				;97			CLR		F_EMI		
				L00FC:
00FC	3440	clr     [040H].0
				;98			JMP		$2
00FD	28FE	jmp     L00FE
				;99	$2:		
				;100			CLR		EMI		;關閉總中斷，防止其他程序打斷
				L00FE:
00FE	340E	clr     EMI
				;101			CLR		hijack_channel_MIC_IO 
00FF	3515	clr     PAC2
				;102			SET		hijack_channel_MIC
0100	3114	set     PA2
				;103	;建立Bias信號 12bit 0
				;104			CALL	_hijack_Send_Bias		
0101	226D	call    _hijack_Send_Bias
				;105	;idel信號     3bit  1
				;106			CALL	_hijack_Send_Idle
0102	227C	call    _hijack_Send_Idle
				;107	;start信號	  1bit  0
				;108			CALL	_hijack_Send_Start				
0103	228B	call    _hijack_Send_Start
				;109	;發送2Byte data + 奇校驗
				;110	 		CLR		hijack_temp_count2		;作為奇偶校驗位計數
0104	1F52	clr     HIJACK_TEMP_COUNT2
				;111			MOV		A,hijack_Send_Data_High
0105	074E	mov     a, HIJACK_SEND_DATA_HIGH
				;112			MOV		hijack_temp_Byte,A
0106	00D0	mov     HIJACK_TEMP_BYTE, a
				;113			CALL	_hijack_Send_Byte
0107	2235	call    _hijack_Send_Byte
				;114			MOV		A,hijack_Send_Data_Low
0108	074F	mov     a, HIJACK_SEND_DATA_LOW
				;115			MOV		hijack_temp_Byte,A		
0109	00D0	mov     HIJACK_TEMP_BYTE, a
				;116			CALL	_hijack_Send_Byte
010A	2235	call    _hijack_Send_Byte
				;117					
				;118	;stop信號	  1bit 1
				;119			CALL	_hijack_Send_Stop
010B	2296	call    _hijack_Send_Stop
				;120	;3bit結束信號
				;121			CALL	_hijack_Send_Idle
010C	227C	call    _hijack_Send_Idle
				;122	
				;123			SNZ		F_EMI
010D	3840	snz     [040H].0
				;124			JMP		_hijack_Send_RET
010E	2910	jmp     _hijack_Send_RET
				;125			SET		EMI			;開啟EMI，
010F	300E	set     EMI
				;126	_hijack_Send_RET:
				;127			SET		IIC_SCL_IO;
				_hijack_Send_RET:
0110	3215	set     PAC4
				;128			SET		IIC_SCL		;hijack發送數據的時候拉低SCL，不接收IICdata
0111	3214	set     PA4
				;129			CLR		F_EMI
0112	3440	clr     [040H].0
				;130			RET 
0113	0003	ret
				;131	_hijack_Send ENDP
				;132	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;133	;						_hijack_Receive	Start							@
				;134	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;135	_hijack_Receive PROC
				;136			PUSH
				_hijack_Receive:
0114	00C1	mov     R_ATEMP, a
0115	070A	mov     a, STATUS
0116	00C2	mov     R_STATUS, a
				;137			SNZ		F_hijack_Rx_Start
0117	3961	snz     HIJACK_RX_PARITY_COUNT[1].2
				;138			JMP		hijack_Normal_Mode
0118	292C	jmp     hijack_Normal_Mode
				;139	hijack_Rx_Mode:		
				;140			CALL	_hijack_Rx_1Bit		
				hijack_Rx_Mode:
0119	21B7	call    _hijack_Rx_1Bit
				;141			CALL	_hijack_PrepareMode	
011A	2163	call    _hijack_PrepareMode
				;142			CALL	_hijack_StartIdleMode		
011B	216D	call    _hijack_StartIdleMode
				;143			CALL	_hijack_Rx_Byte				
011C	2193	call    _hijack_Rx_Byte
				;144			CALL	_hijack_Parity_StopMode
011D	2145	call    _hijack_Parity_StopMode
				;145			CALL	_hijack_ENDIdleMode
011E	217F	call    _hijack_ENDIdleMode
				;146			
				;147			SNZ		F_hijack_Rx_Error
011F	38E1	snz     HIJACK_RX_PARITY_COUNT[1].1
				;148			JMP		_hijack_Receive_RET
0120	2941	jmp     _hijack_Receive_RET
				;149			CLR		F_First_CCRA
0121	3461	clr     HIJACK_RX_PARITY_COUNT[1].0
				;150			CLR		F_hijack_Rx_Error
0122	34E1	clr     HIJACK_RX_PARITY_COUNT[1].1
				;151			CLR		TEST_COUNT
0123	1F5B	clr     TEST_COUNT
				;152			CLR		TEST_COUNT2
0124	1F5C	clr     TEST_COUNT2
				;153			CLR		F_ByteMode
0125	37E1	clr     HIJACK_RX_PARITY_COUNT[1].7
				;154			CLR		F_CompleteRx1Bit
0126	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;155			CLR		F_IdleMode
0127	3761	clr     HIJACK_RX_PARITY_COUNT[1].6
				;156			CLR		F_PrepareMode
0128	36E1	clr     HIJACK_RX_PARITY_COUNT[1].5
				;157			CLR		F_hijack_Rx_Start
0129	3561	clr     HIJACK_RX_PARITY_COUNT[1].2
				;158			CLR		F_hijackstartOk
012A	3462	clr     HIJACK_RX_PARITY_COUNT[2].0
				;159			JMP		_hijack_Receive_RET
012B	2941	jmp     _hijack_Receive_RET
				;160	
				;161	
				;162			
				;163	hijack_Normal_Mode:	
				;164			SNZ		STMA0F
				hijack_Normal_Mode:
012C	3A91	snz     STMA0F
				;165			JMP		_hijack_Normal_CCRP_RET	;(not hijack Rx mode)& (not CCRA interrupt) = normal CCRP interrupt
012D	293E	jmp     _hijack_Normal_CCRP_RET
				;166	;;第一次進入CCRA中斷，初始化相關設置	init hijack Rx Value
				;167			MOV		A,00001000B
012E	0F08	mov     a, 8H
				;168			XORM	A,PA
012F	0494	xorm    a, PA
				;169			CLR		STMA0F		
0130	3691	clr     STMA0F
				;170			SET		F_First_CCRA
0131	3061	set     HIJACK_RX_PARITY_COUNT[1].0
				;171	;		CLR		Hijack_RxOk_Flag
				;172			CLR		hijack_CCRP_count	
0132	1F53	clr     HIJACK_CCRP_COUNT
				;173			MOV		A,STM0AH					;Save CCRA value
0133	072D	mov     a, STM0AH
				;174			MOV		high_CCRA1_H,A	;
0134	00D5	mov     HIGH_CCRA1_H, a
				;175			MOV		A,STM0AL					;
0135	072C	mov     a, STM0AL
				;176			MOV		high_CCRA1_L,A	;
0136	00D6	mov     HIGH_CCRA1_L, a
				;177			INC		TEST_COUNT3
0137	14DD	inc     TEST_COUNT3
				;178			SET		F_hijack_Rx_Start
0138	3161	set     HIJACK_RX_PARITY_COUNT[1].2
				;179			SET		F_PrepareMode
0139	32E1	set     HIJACK_RX_PARITY_COUNT[1].5
				;180			MOV		A,3
013A	0F03	mov     a, 3H
				;181			MOV		hijack_Idle_Count,A
013B	00DE	mov     HIJACK_IDLE_COUNT, a
				;182			CLR		F_hijack_Rx_Error				
013C	34E1	clr     HIJACK_RX_PARITY_COUNT[1].1
				;183			JMP		_hijack_Receive_RET			
013D	2941	jmp     _hijack_Receive_RET
				;184	_hijack_Normal_CCRP_RET:
				;185			SNZ		STMP0F					;CCRP_interrupt也不是 CCRP_interrupt中斷，錯誤
				_hijack_Normal_CCRP_RET:
013E	3A11	snz     STMP0F
				;186			SET		F_hijack_Rx_Error
013F	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;187			CLR		STMP0F		
0140	3611	clr     STMP0F
				;188	_hijack_Receive_RET:
				;189			
				;190			POP		
				_hijack_Receive_RET:
0141	0742	mov     a, R_STATUS
0142	008A	mov     STATUS, a
0143	0741	mov     a, R_ATEMP
				;191			RETI 
0144	0004	reti
				;192	_hijack_Receive ENDP
				;193	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;194	;					_hijack_Receive	End		    						@
				;195	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;196	_hijack_Parity_StopMode PROC
				;197			SNZ		F_Parity_StopMode
				_hijack_Parity_StopMode:
0145	38E2	snz     HIJACK_RX_PARITY_COUNT[2].1
				;198			RET
0146	0003	ret
				;199			SNZ		F_CompleteRx1Bit
0147	39E1	snz     HIJACK_RX_PARITY_COUNT[1].3
				;200			RET
0148	0003	ret
				;201			CLR		F_CompleteRx1Bit
0149	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;202			
				;203			SZ		F_Parity_Ok
014A	3D62	sz      HIJACK_RX_PARITY_COUNT[2].2
				;204			JMP		Stop_Deal					
014B	2957	jmp     Stop_Deal
				;205			SNZ		hijack_Rx_Parity_Count.0
014C	3860	snz     HIJACK_RX_PARITY_COUNT.0
				;206			JMP		Paritylow
014D	2953	jmp     ParityLow
				;207			JMP		ParityHigh
014E	294F	jmp     ParityHigh
				;208	ParityHigh:	
				;209			SNZ		F_0or1Bit
				ParityHigh:
014F	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;210			JMP		_hijack_Parity_StopMode_Error
0150	2960	jmp     _hijack_Parity_StopMode_Error
				;211			SET		F_Parity_Ok
0151	3162	set     HIJACK_RX_PARITY_COUNT[2].2
				;212			JMP		_hijack_Parity_StopMode_RET					
0152	2962	jmp     _hijack_Parity_StopMode_RET
				;213	ParityLow:		
				;214			SZ		F_0or1Bit
				ParityLow:
0153	3E61	sz      HIJACK_RX_PARITY_COUNT[1].4
				;215			JMP		_hijack_Parity_StopMode_Error
0154	2960	jmp     _hijack_Parity_StopMode_Error
				;216			SET		F_Parity_Ok
0155	3162	set     HIJACK_RX_PARITY_COUNT[2].2
				;217			JMP		_hijack_Parity_StopMode_RET			
0156	2962	jmp     _hijack_Parity_StopMode_RET
				;218	Stop_Deal:
				;219			CLR		F_Parity_Ok
				Stop_Deal:
0157	3562	clr     HIJACK_RX_PARITY_COUNT[2].2
				;220			SNZ		F_0or1Bit
0158	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;221			JMP		_hijack_Parity_StopMode_Error
0159	2960	jmp     _hijack_Parity_StopMode_Error
				;222			SET		F_Stop_idleMode
015A	31E2	set     HIJACK_RX_PARITY_COUNT[2].3
				;223			MOV		A,2
015B	0F02	mov     a, 2H
				;224			MOV		hijack_Idle_Count,A
015C	00DE	mov     HIJACK_IDLE_COUNT, a
				;225			CLR		TEST_COUNT
015D	1F5B	clr     TEST_COUNT
				;226			CLR		F_Parity_StopMode				
015E	34E2	clr     HIJACK_RX_PARITY_COUNT[2].1
				;227			JMP		_hijack_Parity_StopMode_RET
015F	2962	jmp     _hijack_Parity_StopMode_RET
				;228	_hijack_Parity_StopMode_Error:
				;229			SET		F_hijack_Rx_Error
				_hijack_Parity_StopMode_Error:
0160	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;230			RET	
0161	0003	ret
				;231	_hijack_Parity_StopMode_RET:			
				;232			RET
				_hijack_Parity_StopMode_RET:
0162	0003	ret
				;233	_hijack_Parity_StopMode ENDP
				;234	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;235	_hijack_PrepareMode PROC
				;236			SNZ		F_PrepareMode
				_hijack_PrepareMode:
0163	3AE1	snz     HIJACK_RX_PARITY_COUNT[1].5
				;237			RET
0164	0003	ret
				;238			SNZ		F_CompleteRx1Bit
0165	39E1	snz     HIJACK_RX_PARITY_COUNT[1].3
				;239			RET
0166	0003	ret
				;240	;		INC		TEST_COUNT2
				;241			CLR		F_CompleteRx1Bit
0167	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;242	;Idle		
				;243			SNZ		F_0or1Bit
0168	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;244			RET
0169	0003	ret
				;245			CLR		F_PrepareMode
016A	36E1	clr     HIJACK_RX_PARITY_COUNT[1].5
				;246			SET		F_IdleMode
016B	3361	set     HIJACK_RX_PARITY_COUNT[1].6
				;247			RET
016C	0003	ret
				;248	_hijack_PrepareMode ENDP
				;249	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;250	_hijack_StartIdleMode PROC
				;251			SNZ		F_IdleMode
				_hijack_StartIdleMode:
016D	3B61	snz     HIJACK_RX_PARITY_COUNT[1].6
				;252			RET
016E	0003	ret
				;253	;Idle		
				;254			SNZ		F_CompleteRx1Bit
016F	39E1	snz     HIJACK_RX_PARITY_COUNT[1].3
				;255			RET
0170	0003	ret
				;256			CLR		F_CompleteRx1Bit
0171	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;257			SDZ		hijack_Idle_Count
0172	17DE	sdz     HIJACK_IDLE_COUNT
				;258			JMP		$1
0173	297B	jmp     L017B
				;259	$0:		
				;260			SZ		F_0or1Bit
0174	3E61	sz      HIJACK_RX_PARITY_COUNT[1].4
				;261			JMP		$2
0175	2979	jmp     L0179
				;262			CLR		F_IdleMode
0176	3761	clr     HIJACK_RX_PARITY_COUNT[1].6
				;263			SET		F_ByteMode
0177	33E1	set     HIJACK_RX_PARITY_COUNT[1].7
				;264			RET
0178	0003	ret
				;265	$2:		
				;266			SET		F_hijack_Rx_Error	;第四bit 還是1，錯誤
				L0179:
0179	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;267			RET
017A	0003	ret
				;268	$1:		
				;269			SZ		F_0or1Bit		
				L017B:
017B	3E61	sz      HIJACK_RX_PARITY_COUNT[1].4
				;270			RET						
017C	0003	ret
				;271			SET		F_hijack_Rx_Error	;3bit 1 Idle 不夠
017D	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;272			RET				
017E	0003	ret
				;273	_hijack_StartIdleMode ENDP
				;274	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;275	_hijack_ENDIdleMode PROC
				;276			SNZ		F_Stop_idleMode
				_hijack_ENDIdleMode:
017F	39E2	snz     HIJACK_RX_PARITY_COUNT[2].3
				;277			RET
0180	0003	ret
				;278			SNZ		F_CompleteRx1Bit
0181	39E1	snz     HIJACK_RX_PARITY_COUNT[1].3
				;279			RET
0182	0003	ret
				;280			CLR		F_CompleteRx1Bit
0183	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;281			INC		TEST_COUNT
0184	14DB	inc     TEST_COUNT
				;282			SDZ		hijack_Idle_Count
0185	17DE	sdz     HIJACK_IDLE_COUNT
				;283			JMP		$1
0186	298F	jmp     L018F
				;284	$0:		
				;285			SNZ		F_0or1Bit
0187	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;286			JMP		$2		
0188	298D	jmp     L018D
				;287			CLR		F_Stop_idleMode
0189	35E2	clr     HIJACK_RX_PARITY_COUNT[2].3
				;288			CLR		F_hijack_Rx_Start
018A	3561	clr     HIJACK_RX_PARITY_COUNT[1].2
				;289			SET		Hijack_RxOk_Flag
018B	32E2	set     HIJACK_RX_PARITY_COUNT[2].5
				;290			RET
018C	0003	ret
				;291	$2:		
				;292			SET		F_hijack_Rx_Error	;第四bit 還是1，錯誤
				L018D:
018D	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;293			RET
018E	0003	ret
				;294	$1:		
				;295			SZ		F_0or1Bit		
				L018F:
018F	3E61	sz      HIJACK_RX_PARITY_COUNT[1].4
				;296			RET						
0190	0003	ret
				;297			SET		F_hijack_Rx_Error	;3bit 1 Idle 不夠
0191	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;298			RET					
0192	0003	ret
				;299	_hijack_ENDIdleMode ENDP
				;300	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;301	_hijack_Rx_Byte PROC
				;302			SNZ		F_ByteMode
				_hijack_Rx_Byte:
0193	3BE1	snz     HIJACK_RX_PARITY_COUNT[1].7
				;303			RET
0194	0003	ret
				;304			SNZ		F_CompleteRx1Bit
0195	39E1	snz     HIJACK_RX_PARITY_COUNT[1].3
				;305			RET
0196	0003	ret
				;306			CLR		F_CompleteRx1Bit		
0197	35E1	clr     HIJACK_RX_PARITY_COUNT[1].3
				;307			SNZ		F_hijackstartOk
0198	3862	snz     HIJACK_RX_PARITY_COUNT[2].0
				;308			JMP		$0
0199	299B	jmp     L019B
				;309			JMP		hijack_Rx_ByteEnter
019A	29A6	jmp     hijack_Rx_ByteEnter
				;310	$0:
				;311			SNZ		F_0or1Bit
				L019B:
019B	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;312			JMP		$1
019C	299F	jmp     L019F
				;313			SET		F_hijack_Rx_Error
019D	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;314			RET
019E	0003	ret
				;315	$1:
				;316			SET		F_hijackstartOk
				L019F:
019F	3062	set     HIJACK_RX_PARITY_COUNT[2].0
				;317			MOV		A,16
01A0	0F10	mov     a, 10H
				;318			MOV		hijack_Rx_Count,A
01A1	00DF	mov     HIJACK_RX_COUNT, a
				;319			CLR		hijack_Receive_DataH
01A2	1F4C	clr     HIJACK_RECEIVE_DATAH
				;320			CLR		hijack_Receive_DataL
01A3	1F4D	clr     HIJACK_RECEIVE_DATAL
				;321			CLR		hijack_Rx_Parity_Count
01A4	1F60	clr     HIJACK_RX_PARITY_COUNT
				;322			RET										
01A5	0003	ret
				;323	hijack_Rx_ByteEnter:
				;324			SDZ 	hijack_Rx_Count 	;16bit值是否已經讀取完成	
				hijack_Rx_ByteEnter:
01A6	17DF	sdz     HIJACK_RX_COUNT
				;325			JMP		hijack_Rx_Byte_LOOP
01A7	29AC	jmp     hijack_Rx_Byte_LOOP
				;326			SET		F_CompleteRx1Bit
01A8	31E1	set     HIJACK_RX_PARITY_COUNT[1].3
				;327			SET		F_Parity_StopMode	;進入下一個模式
01A9	30E2	set     HIJACK_RX_PARITY_COUNT[2].1
				;328			CLR		F_ByteMode			
01AA	37E1	clr     HIJACK_RX_PARITY_COUNT[1].7
				;329			RET
01AB	0003	ret
				;330	hijack_Rx_Byte_LOOP:
				;331			CLR		C
				hijack_Rx_Byte_LOOP:
01AC	340A	clr     C
				;332			RLC		hijack_Receive_DataL
01AD	1ACD	rlc     HIJACK_RECEIVE_DATAL
				;333			RLC		hijack_Receive_DataH		
01AE	1ACC	rlc     HIJACK_RECEIVE_DATAH
				;334			
				;335			SNZ		F_0or1Bit
01AF	3A61	snz     HIJACK_RX_PARITY_COUNT[1].4
				;336			JMP		hijack_Low
01B0	29B5	jmp     hijack_Low
				;337			JMP		hijack_High
01B1	29B2	jmp     hijack_High
				;338	hijack_High:
				;339			INC		hijack_Rx_Parity_Count
				hijack_High:
01B2	14E0	inc     HIJACK_RX_PARITY_COUNT
				;340			SET		hijack_Receive_DataL.0
01B3	304D	set     HIJACK_RECEIVE_DATAL.0
				;341			JMP		hijack_Next_Bit
01B4	29B6	jmp     hijack_Next_Bit
				;342	hijack_Low:
				;343			CLR		hijack_Receive_DataL.0
				hijack_Low:
01B5	344D	clr     HIJACK_RECEIVE_DATAL.0
				;344	hijack_Next_Bit:
				;345			RET
				hijack_Next_Bit:
01B6	0003	ret
				;346	_hijack_Rx_Byte ENDP
				;347	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;348	_hijack_Rx_1Bit PROC
				;349			SNZ		STMP0F
				_hijack_Rx_1Bit:
01B7	3A11	snz     STMP0F
				;350			JMP		CCRA_interrupt
01B8	29C0	jmp     CCRA_interrupt
				;351	CCRP_interrupt:					
				;352			CLR		STMP0F
				CCRP_interrupt:
01B9	3611	clr     STMP0F
				;353			INC		hijack_CCRP_count
01BA	14D3	inc     HIJACK_CCRP_COUNT
				;354			MOV		A,hijack_CCRP_count
01BB	0753	mov     a, HIJACK_CCRP_COUNT
				;355			XOR		A,hijack_Time_Out		
01BC	0C28	xor     a, 28H
				;356			SNZ		Z
01BD	390A	snz     Z
				;357			RET
01BE	0003	ret
				;358			JMP		_hijack_Rx_1Bit_Error ;超出時間，錯誤
01BF	2A23	jmp     _hijack_Rx_1Bit_Error
				;359	CCRA_interrupt:
				;360			SNZ		STMA0F
				CCRA_interrupt:
01C0	3A91	snz     STMA0F
				;361			JMP		_hijack_Rx_1Bit_Error ;不是CCRA 中斷也不是CCRP中斷，錯誤
01C1	2A23	jmp     _hijack_Rx_1Bit_Error
				;362			CLR		STMA0F
01C2	3691	clr     STMA0F
				;363	;		INC		TEST_COUNT
				;364			MOV		A,00001000B
01C3	0F08	mov     a, 8H
				;365			XORM	A,PA
01C4	0494	xorm    a, PA
				;366			SZ		F_First_CCRA
01C5	3C61	sz      HIJACK_RX_PARITY_COUNT[1].0
				;367			JMP		Second_CCRA
01C6	29E3	jmp     Second_CCRA
				;368	First_CCRA:	;第一次CCRA中斷 上升沿									
				;369			SET		F_First_CCRA
				First_CCRA:
01C7	3061	set     HIJACK_RX_PARITY_COUNT[1].0
				;370			MOV		A,STM0AH					;Save CCRA value
01C8	072D	mov     a, STM0AH
				;371			MOV		high_CCRA1_H,A	
01C9	00D5	mov     HIGH_CCRA1_H, a
				;372			MOV		A,STM0AL					
01CA	072C	mov     a, STM0AL
				;373			MOV		high_CCRA1_L,A	
01CB	00D6	mov     HIGH_CCRA1_L, a
				;374			MOV		A,hijack_CCRP_count
01CC	0753	mov     a, HIJACK_CCRP_COUNT
				;375			MOV		hijack_Period_L,A			;保存CCRP 的計數值
01CD	00DA	mov     HIJACK_PERIOD_L, a
				;376			CLR		hijack_CCRP_count
01CE	1F53	clr     HIJACK_CCRP_COUNT
				;377	;		INC		TEST_COUNT
				;378	;計算週期
				;379	;N x 512-high_First_CCRA_Count + high_Second_CCRA_Count
				;380	if stmCCRP_T==512
				;381			MOV		A,9
01CF	0F09	mov     a, 9H
				;382			MOV		hijack_temp_count1,A 		;根據CCRP 的值修改移位的值
01D0	00D1	mov     HIJACK_TEMP_COUNT1, a
				;383	endif
				;384	if stmCCRP_T==256
				;385			MOV		A,8
				;386			MOV		hijack_temp_count1,A 		;根據CCRP 的值修改移位的值
				;387	endif
				;388	$0:
				;389			CLR		C 							;移位進行乘法運算
				L01D1:
01D1	340A	clr     C
				;390			RLC		hijack_Period_L
01D2	1ADA	rlc     HIJACK_PERIOD_L
				;391			RLC		hijack_Period_H	
01D3	1AD9	rlc     HIJACK_PERIOD_H
				;392			SDZ		hijack_temp_count1
01D4	17D1	sdz     HIJACK_TEMP_COUNT1
				;393			JMP		$0		
01D5	29D1	jmp     L01D1
				;394			CLR		C							
01D6	340A	clr     C
				;395			MOV		A,high_CCRA1_L				;加上第二次取得的CCRA 的值
01D7	0756	mov     a, HIGH_CCRA1_L
				;396			ADDM	A,hijack_Period_L
01D8	03DA	addm    a, HIJACK_PERIOD_L
				;397			MOV		A,high_CCRA1_H
01D9	0755	mov     a, HIGH_CCRA1_H
				;398			ADCM	A,hijack_Period_H		
01DA	13D9	adcm    a, HIJACK_PERIOD_H
				;399			CLR		C 
01DB	340A	clr     C
				;400			MOV		A,hijack_Period_L			;減去第一次取得的 CCRA 的值
01DC	075A	mov     a, HIJACK_PERIOD_L
				;401			SUB		A,high_CCRA2_L
01DD	0258	sub     a, HIGH_CCRA2_L
				;402			MOV		hijack_Period_L,A
01DE	00DA	mov     HIJACK_PERIOD_L, a
				;403			MOV		A,hijack_Period_H
01DF	0759	mov     a, HIJACK_PERIOD_H
				;404			SBC		A,high_CCRA2_H
01E0	1257	sbc     a, HIGH_CCRA2_H
				;405			MOV		hijack_Period_H,A		
01E1	00D9	mov     HIJACK_PERIOD_H, a
				;406	
				;407			JMP		hijack_Period					
01E2	29FE	jmp     hijack_Period_0
				;408	Second_CCRA:;第二次CCRA中斷 上升沿
				;409			CLR		F_First_CCRA
				Second_CCRA:
01E3	3461	clr     HIJACK_RX_PARITY_COUNT[1].0
				;410			MOV		A,STM0AH					;Save CCRA value
01E4	072D	mov     a, STM0AH
				;411			MOV		high_CCRA2_H,A	;
01E5	00D7	mov     HIGH_CCRA2_H, a
				;412			MOV		A,STM0AL					;
01E6	072C	mov     a, STM0AL
				;413			MOV		high_CCRA2_L,A	;
01E7	00D8	mov     HIGH_CCRA2_L, a
				;414			MOV		A,hijack_CCRP_count
01E8	0753	mov     a, HIJACK_CCRP_COUNT
				;415			MOV		hijack_Period_L,A			;保存CCRP 的計數值
01E9	00DA	mov     HIJACK_PERIOD_L, a
				;416			CLR		hijack_CCRP_count
01EA	1F53	clr     HIJACK_CCRP_COUNT
				;417	;		INC		TEST_COUNT		
				;418	;計算週期
				;419	;N x 512-high_First_CCRA_Count + high_Second_CCRA_Count
				;420	if stmCCRP_T==512
				;421			MOV		A,9
01EB	0F09	mov     a, 9H
				;422			MOV		hijack_temp_count1,A 		;根據CCRP 的值修改移位的值
01EC	00D1	mov     HIJACK_TEMP_COUNT1, a
				;423	endif
				;424	if stmCCRP_T==256
				;425			MOV		A,8
				;426			MOV		hijack_temp_count1,A 		;根據CCRP 的值修改移位的值
				;427	endif
				;428	$0:
				;429			CLR		C 							;移位進行乘法運算
				L01ED:
01ED	340A	clr     C
				;430			RLC		hijack_Period_L
01EE	1ADA	rlc     HIJACK_PERIOD_L
				;431			RLC		hijack_Period_H	
01EF	1AD9	rlc     HIJACK_PERIOD_H
				;432			SDZ		hijack_temp_count1
01F0	17D1	sdz     HIJACK_TEMP_COUNT1
				;433			JMP		$0		
01F1	29ED	jmp     L01ED
				;434			CLR		C							
01F2	340A	clr     C
				;435			MOV		A,high_CCRA2_L				;加上第二次取得的CCRA 的值
01F3	0758	mov     a, HIGH_CCRA2_L
				;436			ADDM	A,hijack_Period_L
01F4	03DA	addm    a, HIJACK_PERIOD_L
				;437			MOV		A,high_CCRA2_H
01F5	0757	mov     a, HIGH_CCRA2_H
				;438			ADCM	A,hijack_Period_H		
01F6	13D9	adcm    a, HIJACK_PERIOD_H
				;439			CLR		C 
01F7	340A	clr     C
				;440			MOV		A,hijack_Period_L			;減去第一次取得的 CCRA 的值
01F8	075A	mov     a, HIJACK_PERIOD_L
				;441			SUB		A,high_CCRA1_L
01F9	0256	sub     a, HIGH_CCRA1_L
				;442			MOV		hijack_Period_L,A
01FA	00DA	mov     HIJACK_PERIOD_L, a
				;443			MOV		A,hijack_Period_H
01FB	0759	mov     a, HIJACK_PERIOD_H
				;444			SBC		A,high_CCRA1_H
01FC	1255	sbc     a, HIGH_CCRA1_H
				;445			MOV		hijack_Period_H,A		
01FD	00D9	mov     HIJACK_PERIOD_H, a
				;446	hijack_Period:		
				;447	;判斷是否是0
				;448	hijack_Period_0:
				;449	;		INC		TEST_COUNT				
				;450			MOV		A,hijack_Period_H
				hijack_Period_0:
				hijack_Period:
01FE	0759	mov     a, HIJACK_PERIOD_H
				;451			XOR		A,5					;hijack_Period0_Max 高八位
01FF	0C05	xor     a, 5H
				;452			SNZ		Z
0200	390A	snz     Z
				;453			JMP		hijack_Period_1				;高Byte不相等，判斷是否為Bit 1
0201	2A0C	jmp     hijack_Period_1
				;454	;高位相等，判斷低八位是否在容差範圍內		
				;455	        MOV     A,hijack_Period_L
0202	075A	mov     a, HIJACK_PERIOD_L
				;456	        SUB     A,94H +Tolerance 
0203	0AD5	sub     a, D5H
				;457	        SZ      C		
0204	3C0A	sz      C
				;458			JMP		_hijack_Rx_1Bit_Error		;週期太大錯誤
0205	2A23	jmp     _hijack_Rx_1Bit_Error
				;459	        MOV     A,hijack_Period_L
0206	075A	mov     a, HIJACK_PERIOD_L
				;460	        SUB     A,94H - Tolerance 
0207	0A53	sub     a, 53H
				;461	        SNZ      C			
0208	380A	snz     C
				;462			JMP		_hijack_Rx_1Bit_Error		;週期太小錯誤
0209	2A23	jmp     _hijack_Rx_1Bit_Error
				;463			CLR		F_0or1Bit					;由週期判斷為Bit 0
020A	3661	clr     HIJACK_RX_PARITY_COUNT[1].4
				;464			JMP		_hijack_Rx_1Bit_RET
020B	2A21	jmp     _hijack_Rx_1Bit_RET
				;465	hijack_Period_1:	;是否在294H~316H之間		
				;466			MOV		A,hijack_Period_H
				hijack_Period_1:
020C	0759	mov     a, HIJACK_PERIOD_H
				;467			XOR		A,2					;hijack_Period1_Max 高八位
020D	0C02	xor     a, 2H
				;468			SZ		Z
020E	3D0A	sz      Z
				;469			JMP		highByte2				;==2，判斷是否在294~300之間
020F	2A1A	jmp     highByte2
				;470	;是否==3
				;471			MOV		A,hijack_Period_H
0210	0759	mov     a, HIJACK_PERIOD_H
				;472			XOR		A,3					;hijack_Period1_Max 高八位
0211	0C03	xor     a, 3H
				;473			SZ		Z
0212	3D0A	sz      Z
				;474			JMP		highByte3	
0213	2A15	jmp     highByte3
				;475			JMP		_hijack_Rx_1Bit_Error	;高Byte既不是2也不是3，錯誤
0214	2A23	jmp     _hijack_Rx_1Bit_Error
				;476	highByte3: ;300~316H
				;477	        MOV     A,hijack_Period_L
				highByte3:
0215	075A	mov     a, HIJACK_PERIOD_L
				;478	        SUB     A,016H
0216	0A16	sub     a, 16H
				;479	        SZ      C
0217	3C0A	sz      C
				;480	        JMP		_hijack_Rx_1Bit_Error
0218	2A23	jmp     _hijack_Rx_1Bit_Error
				;481	        JMP		thisis1		
0219	2A1F	jmp     thisis1
				;482	highByte2:		
				;483	;294H~300H之間
				;484	        MOV     A,hijack_Period_L
				highByte2:
021A	075A	mov     a, HIJACK_PERIOD_L
				;485	        SUB     A,094H
021B	0A94	sub     a, 94H
				;486	        SNZ      C
021C	380A	snz     C
				;487	        JMP		_hijack_Rx_1Bit_Error
021D	2A23	jmp     _hijack_Rx_1Bit_Error
				;488	        JMP		thisis1
021E	2A1F	jmp     thisis1
				;489	thisis1:
				;490			SET		F_0or1Bit
				thisis1:
021F	3261	set     HIJACK_RX_PARITY_COUNT[1].4
				;491			JMP		_hijack_Rx_1Bit_RET				
0220	2A21	jmp     _hijack_Rx_1Bit_RET
				;492	
				;493	_hijack_Rx_1Bit_RET:
				;494			SET		F_CompleteRx1Bit		
				_hijack_Rx_1Bit_RET:
0221	31E1	set     HIJACK_RX_PARITY_COUNT[1].3
				;495			RET
0222	0003	ret
				;496	_hijack_Rx_1Bit_Error:
				;497			SET		F_hijack_Rx_Error		;CCRP 連續發生的次數超過設定值(週期時間太長 Error)
				_hijack_Rx_1Bit_Error:
0223	30E1	set     HIJACK_RX_PARITY_COUNT[1].1
				;498			RET								;置錯誤標誌位
0224	0003	ret
				;499	_hijack_Rx_1Bit ENDP
				;500	
				;501	
				;502	
				;503		
				;504	
				;505	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;506	_hijack_init PROC
				;507	if stmCCRP_T==512
				;508			MOV		A,00000100B	;4/fsys  512 CCRP interrput
				_hijack_init:
0225	0F04	mov     a, 4H
				;509			MOV		STM0C0,A
0226	00A8	mov     STM0C0, a
				;510	endif
				;511	if stmCCRP_T==256
				;512			MOV		A,00000010B	;4/fsys  512 CCRP interrput
				;513			MOV		STM0C0,A
				;514	endif	
				;515			MOV		A,01000000B	;輸入捕捉模式、上升沿觸發、P 清除time
0227	0F40	mov     a, 40H
				;516			MOV		STM0C1,A
0228	00A9	mov     STM0C1, a
				;517			
				;518			SET		hijack_channel_L_IO
0229	3315	set     PAC6
				;519			CLR		hijack_channel_L
022A	3714	clr     PA6
				;520			
				;521			CLR		STP0IPS		;STP0I on PA6
022B	3618	clr     STP0IPS
				;522			
				;523			SET		STMA0E		;開啟Timer 輸入捕捉模式中斷
022C	3091	set     STMA0E
				;524			SET		STMP0E
022D	3011	set     STMP0E
				;525			SET		MF0E
022E	300F	set     MF0E
				;526			CLR		MF0F
022F	360F	clr     MF0F
				;527			CLR		STMA0F
0230	3691	clr     STMA0F
				;528			CLR		STMP0F
0231	3611	clr     STMP0F
				;529			SET		ST0ON
0232	31A8	set     ST0ON
				;530			SET		EMI
0233	300E	set     EMI
				;531			RET
0234	0003	ret
				;532	_hijack_init ENDP
				;533	
				;534	
				;535	
				;536	
				;537	;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;538	_hijack_Send_Byte PROC
				;539	;		local temp  D
				;540	 		CLR		hijack_channel_MIC
				_hijack_Send_Byte:
0235	3514	clr     PA2
				;541	 		MOV		A,8 ;SET 8 BIT COUNTER
0236	0F08	mov     a, 8H
				;542	 		MOV		hijack_temp_count1,A
0237	00D1	mov     HIJACK_TEMP_COUNT1, a
				;543	hijack_send_8bitloop:
				;544			SZ		hijack_temp_Byte.7
				hijack_send_8bitloop:
0238	3FD0	sz      HIJACK_TEMP_BYTE.7
				;545			JMP		hijack_send_high
0239	2A3B	jmp     hijack_send_high
				;546			JMP		hijack_send_low
023A	2A47	jmp     hijack_send_low
				;547	hijack_send_high:
				;548			INC		hijack_temp_count2		;奇校驗
				hijack_send_high:
023B	14D2	inc     HIJACK_TEMP_COUNT2
				;549			SET		hijack_channel_MIC
023C	3114	set     PA2
				;550			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
023D	0F3C	mov     a, 3CH
023E	0001	clr     wdt
				L023F:
023F	1785	sdz     ACC
0240	2A3F	jmp     L023F
				;551			CLR		hijack_channel_MIC
0241	3514	clr     PA2
				;552			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0242	0F3C	mov     a, 3CH
0243	0001	clr     wdt
				L0244:
0244	1785	sdz     ACC
0245	2A44	jmp     L0244
				;553			JMP		hijack_send_Next_Bit	
0246	2A51	jmp     hijack_send_Next_Bit
				;554	hijack_send_low:		
				;555			SET		hijack_channel_MIC	;
				hijack_send_low:
0247	3114	set     PA2
				;556			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0248	0F78	mov     a, 78H
0249	0001	clr     wdt
				L024A:
024A	1785	sdz     ACC
024B	2A4A	jmp     L024A
				;557			CLR		hijack_channel_MIC
024C	3514	clr     PA2
				;558			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值 		
024D	0F78	mov     a, 78H
024E	0001	clr     wdt
				L024F:
024F	1785	sdz     ACC
0250	2A4F	jmp     L024F
				;559	hijack_send_Next_Bit:
				;560			RL		hijack_temp_Byte
				hijack_send_Next_Bit:
0251	18D0	rl      HIJACK_TEMP_BYTE
				;561			SDZ		hijack_temp_count1
0252	17D1	sdz     HIJACK_TEMP_COUNT1
				;562			JMP		hijack_send_8bitloop
0253	2A38	jmp     hijack_send_8bitloop
				;563	
				;564	_hijack_Send_Byte_RET:
				;565			RET 
				_hijack_Send_Byte_RET:
0254	0003	ret
				;566	_hijack_Send_Byte ENDP
				;567	;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
				;568	hijack_send_odd_Bit PROC
				;569			SZ		hijack_temp_count2.0
				hijack_send_odd_Bit:
0255	3C52	sz      HIJACK_TEMP_COUNT2.0
				;570			JMP		hijack_send_odd_Bit_Low
0256	2A62	jmp     hijack_send_odd_Bit_Low
				;571	;		JMP		hijack_odd_Bit_high	
				;572	hijack_send_odd_Bit_high:
				;573			SET		hijack_channel_MIC
				hijack_send_odd_Bit_high:
0257	3114	set     PA2
				;574			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0258	0F3C	mov     a, 3CH
0259	0001	clr     wdt
				L025A:
025A	1785	sdz     ACC
025B	2A5A	jmp     L025A
				;575			CLR		hijack_channel_MIC
025C	3514	clr     PA2
				;576			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
025D	0F3C	mov     a, 3CH
025E	0001	clr     wdt
				L025F:
025F	1785	sdz     ACC
0260	2A5F	jmp     L025F
				;577			JMP		hijack_send_odd_Bit_RET		
0261	2A6C	jmp     hijack_send_odd_Bit_RET
				;578	hijack_send_odd_Bit_Low:
				;579			SET		hijack_channel_MIC	;
				hijack_send_odd_Bit_Low:
0262	3114	set     PA2
				;580			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0263	0F78	mov     a, 78H
0264	0001	clr     wdt
				L0265:
0265	1785	sdz     ACC
0266	2A65	jmp     L0265
				;581			CLR		hijack_channel_MIC
0267	3514	clr     PA2
				;582			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0268	0F78	mov     a, 78H
0269	0001	clr     wdt
				L026A:
026A	1785	sdz     ACC
026B	2A6A	jmp     L026A
				;583	hijack_send_odd_Bit_RET:
				;584			RET 							
				hijack_send_odd_Bit_RET:
026C	0003	ret
				;585	hijack_send_odd_Bit ENDP
				;586	;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;587	_hijack_Send_Bias PROC
				;588	;用於先建立bias
				;589	 		MOV		A,12 ;SET 8 BIT COUNTER
				_hijack_Send_Bias:
026D	0F0C	mov     a, CH
				;590	 		MOV		hijack_temp_count1,A
026E	00D1	mov     HIJACK_TEMP_COUNT1, a
				;591	$1:		
				;592			SET		hijack_channel_MIC	;
				L026F:
026F	3114	set     PA2
				;593			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0270	0F78	mov     a, 78H
0271	0001	clr     wdt
				L0272:
0272	1785	sdz     ACC
0273	2A72	jmp     L0272
				;594			CLR		hijack_channel_MIC
0274	3514	clr     PA2
				;595			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值 		
0275	0F78	mov     a, 78H
0276	0001	clr     wdt
				L0277:
0277	1785	sdz     ACC
0278	2A77	jmp     L0277
				;596			SDZ		hijack_temp_count1
0279	17D1	sdz     HIJACK_TEMP_COUNT1
				;597			JMP		$1					
027A	2A6F	jmp     L026F
				;598			RET
027B	0003	ret
				;599	_hijack_Send_Bias ENDP
				;600	;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;601	_hijack_Send_Idle PROC
				;602	;,3bit 1頻率的idle信號，用於信號發送的開始和結束
				;603	 		MOV		A,3 					;SET 8 BIT COUNTER
				_hijack_Send_Idle:
027C	0F03	mov     a, 3H
				;604	 		MOV		hijack_temp_count1,A
027D	00D1	mov     HIJACK_TEMP_COUNT1, a
				;605	$1: 		
				;606			SET		hijack_channel_MIC	;
				L027E:
027E	3114	set     PA2
				;607			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
027F	0F3C	mov     a, 3CH
0280	0001	clr     wdt
				L0281:
0281	1785	sdz     ACC
0282	2A81	jmp     L0281
				;608			CLR		hijack_channel_MIC
0283	3514	clr     PA2
				;609			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0284	0F3C	mov     a, 3CH
0285	0001	clr     wdt
				L0286:
0286	1785	sdz     ACC
0287	2A86	jmp     L0286
				;610			SDZ		hijack_temp_count1
0288	17D1	sdz     HIJACK_TEMP_COUNT1
				;611			JMP		$1
0289	2A7E	jmp     L027E
				;612			RET	
028A	0003	ret
				;613	_hijack_Send_Idle ENDP
				;614	;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;615	_hijack_Send_Start PROC
				;616	;1bit 0頻率 用於開始信號,		
				;617			SET		hijack_channel_MIC	;
				_hijack_Send_Start:
028B	3114	set     PA2
				;618			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
028C	0F78	mov     a, 78H
028D	0001	clr     wdt
				L028E:
028E	1785	sdz     ACC
028F	2A8E	jmp     L028E
				;619			CLR		hijack_channel_MIC
0290	3514	clr     PA2
				;620			DELAY	fskDelaycount0/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0291	0F78	mov     a, 78H
0292	0001	clr     wdt
				L0293:
0293	1785	sdz     ACC
0294	2A93	jmp     L0293
				;621			RET	
0295	0003	ret
				;622	_hijack_Send_Start ENDP
				;623	;;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				;624	_hijack_Send_Stop PROC
				;625	;1bit 1頻率用於結束信號,		
				;626			SET		hijack_channel_MIC	;
				_hijack_Send_Stop:
0296	3114	set     PA2
				;627			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
0297	0F3C	mov     a, 3CH
0298	0001	clr     wdt
				L0299:
0299	1785	sdz     ACC
029A	2A99	jmp     L0299
				;628			CLR		hijack_channel_MIC
029B	3514	clr     PA2
				;629			DELAY	fskDelaycount1/3		;Delay延遲了3倍，so fskDelaycount0/3為正確值
029C	0F3C	mov     a, 3CH
029D	0001	clr     wdt
				L029E:
029E	1785	sdz     ACC
029F	2A9E	jmp     L029E
				;630			RET	
02A0	0003	ret
				;631	_hijack_Send_Stop ENDP
				data .SECTION 'DATA'
				R_ATEMP DB DUP (?)
				R_STATUS DB DUP (?)
				IIC_DEVICE_ADDR DB DUP (?)
				IIC_RECEIVE_DATA_HIGH DB DUP (?)
				IIC_RECEIVE_DATA_LOW DB DUP (?)
				IIC_SEND_DATA_HIGH DB DUP (?)
				IIC_SEND_DATA_LOW DB DUP (?)
				IIC_TEMP_CONUNT1 DB DUP (?)
				IIC_TEMP_CONUNT2 DB DUP (?)
				IIC_TEMP_BYTE DB DUP (?)
				HIJACK_RECEIVE_DATAH DB DUP (?)
				HIJACK_RECEIVE_DATAL DB DUP (?)
				HIJACK_SEND_DATA_HIGH DB DUP (?)
				HIJACK_SEND_DATA_LOW DB DUP (?)
				HIJACK_TEMP_BYTE DB DUP (?)
				HIJACK_TEMP_COUNT1 DB DUP (?)
				HIJACK_TEMP_COUNT2 DB DUP (?)
				HIJACK_CCRP_COUNT DB DUP (?)
				HIJACK_RX_STEP DB DUP (?)
				HIGH_CCRA1_H DB DUP (?)
				HIGH_CCRA1_L DB DUP (?)
				HIGH_CCRA2_H DB DUP (?)
				HIGH_CCRA2_L DB DUP (?)
				HIJACK_PERIOD_H DB DUP (?)
				HIJACK_PERIOD_L DB DUP (?)
				TEST_COUNT DB DUP (?)
				TEST_COUNT2 DB DUP (?)
				TEST_COUNT3 DB DUP (?)
				HIJACK_IDLE_COUNT DB DUP (?)
				HIJACK_RX_COUNT DB DUP (?)
				HIJACK_RX_PARITY_COUNT DB DUP (?)
				F_EMI DB DUP (?) ; F_EMI
				FLAG_SDA_STATUS DB DUP (?) ; FLAG_SDA_STATUS
				IIC_RXOK_FLAG DB DUP (?) ; IIC_RXOK_FLAG
				IIC_TXOK_FLAG DB DUP (?) ; IIC_TXOK_FLAG
				F_FIRST_CCRA DB DUP (?) ; F_FIRST_CCRA
				F_HIJACK_RX_ERROR DB DUP (?) ; F_HIJACK_RX_ERROR
				F_HIJACK_RX_START DB DUP (?) ; F_HIJACK_RX_START
				F_COMPLETERX1BIT DB DUP (?) ; F_COMPLETERX1BIT
				F_0OR1BIT DB DUP (?) ; F_0OR1BIT
				F_PREPAREMODE DB DUP (?) ; F_PREPAREMODE
				F_IDLEMODE DB DUP (?) ; F_IDLEMODE
				F_BYTEMODE DB DUP (?) ; F_BYTEMODE
				F_HIJACKSTARTOK DB DUP (?) ; F_HIJACKSTARTOK
				F_PARITY_STOPMODE DB DUP (?) ; F_PARITY_STOPMODE
				F_PARITY_OK DB DUP (?) ; F_PARITY_OK
				F_STOP_IDLEMODE DB DUP (?) ; F_STOP_IDLEMODE
				F_FIRST_PARITY_STOPMODE DB DUP (?) ; F_FIRST_PARITY_STOPMODE
				HIJACK_RXOK_FLAG DB DUP (?) ; HIJACK_RXOK_FLAG
